/**********************************************************************
 * Copyright 2013 Georg Rudoy <0xd34df00d@gmail.com>
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <boost/serialization/access.hpp>
#include "item.h"

namespace Laretz
{
	enum class OpType
	{
		// Requests
		Append,
		Delete,
		Modify,

		List,
		Fetch,

		// Only replies
		Refetch
	};

	enum ErrorCode
	{
		SeqOutdated = 100,
		UnknownParent,
		InvalidSemantics
	};

	class Operation
	{
		OpType m_type;

		std::vector<Item> m_items;

		friend class boost::serialization::access;
	public:
		Operation ();
		Operation (OpType op, const std::vector<Item>& items);

		OpType getType () const;
		void setType (OpType);

		const std::vector<Item>& getItems () const;
		std::vector<Item>& getItems ();
		void setItems (const std::vector<Item>&);

		bool empty () const;
		bool contains (const std::string&) const;

		Operation& operator+= (const Item&);
		bool operator-= (const Item&);

		Operation& operator+= (const Operation&);
	private:
		template<typename Ar>
		void serialize (Ar& ar, const size_t)
		{
			ar & m_type;
			ar & m_items;
		}
	};
}
