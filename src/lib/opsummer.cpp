/**********************************************************************
 * Copyright 2013 Georg Rudoy <0xd34df00d@gmail.com>
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "opsummer.h"
#include <stdexcept>
#include <unordered_set>
#include "item.h"

namespace Laretz
{
	OpSummer& OpSummer::operator<< (const Operation& op)
	{
		switch (op.getType ())
		{
		case OpType::Append:
			m_ops.push_back (op);
			break;
		case OpType::Delete:
			mergeDeleted (op);
			break;
		case OpType::Modify:
			mergeModified (op);
			break;
		case OpType::List:
		case OpType::Fetch:
			throw std::runtime_error ("OpSummer is for modify-only operations");
			break;
		}

		return *this;
	}

	void OpSummer::mergeModified (Operation toAdd)
	{
		std::unordered_set<std::string> m_addedIds;
		std::unordered_set<std::string> m_deletedIds;

		for (auto& op : m_ops)
		{
			switch (op.getType ())
			{
			case OpType::Append:
				for (const auto& item : op.getItems ())
					m_addedIds.insert (item.getId ());

				for (const auto& item : toAdd.getItems ())
					if (op.contains (item.getId ()))
					{
						op += item;
						toAdd -= item;
					}
				break;
			case OpType::Delete:
				for (const auto& item : op.getItems ())
					m_deletedIds.insert (item.getId ());
				break;
			case OpType::Modify:
				for (const auto& item : toAdd.getItems ())
					if (m_deletedIds.find (item.getId ()) != m_deletedIds.end ())
					{
						op += item;
						toAdd -= item;
					}
				break;
			case OpType::List:
			case OpType::Fetch:
				break;
			}
		}

		if (!toAdd.empty ())
			m_ops.push_back (toAdd);
	}

	void OpSummer::mergeDeleted (Operation toDelete)
	{
		const auto srcOp = toDelete;

		for (auto& op : m_ops)
		{
			if (op.getType () == OpType::Delete)
				continue;

			for (const auto& item : op.getItems ())
				if ((op -= item) && op.getType () == OpType::Append)
					toDelete -= item;
		}

		if (!toDelete.empty ())
			m_ops.push_back (toDelete);
	}
}
