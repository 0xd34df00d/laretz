/**********************************************************************
 * Copyright 2013 Georg Rudoy <0xd34df00d@gmail.com>
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "db.h"
#include <mongo/client/dbclient.h>

namespace Laretz
{
	DBError::DBError (const std::string& reason)
	: runtime_error (reason)
	{
	}

	DBError::~DBError () throw ()
	{
	}

	DB::DB (const std::string& m_dbName)
	: m_dbPrefix ("user_" + m_dbName + '.')
	, m_svcPrefix ("service_" + m_dbName + '.')
	, m_conn (new mongo::DBClientConnection)
	{
		m_conn->connect ("localhost");
	}

	std::unordered_set<std::string> DB::enumerateItems (uint64_t after, const std::string& parent) const
	{
		auto cursor = m_conn->query (getNamespace (parent),
				QUERY ("seq" << mongo::GT << boost::lexical_cast<std::string> (after) << "parent" << parent));

		std::unordered_set<std::string> result;
		while (cursor->more ())
			result.insert (cursor->next ().getStringField ("id"));
		return result;
	}

	boost::optional<Item> DB::loadItem (const std::string& id)
	{
		const auto& parentId = getParentId (id);
		if (!parentId)
			return {};

		auto cursor = m_conn->query (getNamespace (*parentId), QUERY ("id" << id));
		if (!cursor->more ())
			return {};

		const auto& obj = cursor->next ();
		Item item { id, *parentId, static_cast<uint64_t> (obj ["seq"].Long ()) };

		std::set<std::string> fieldNames;
		obj.getFieldNames (fieldNames);
		for (auto knownField : { "id", "parentId", "seq" })
			fieldNames.erase (knownField);

		for (const auto& fieldName : fieldNames)
			item.setField (fieldName, obj [fieldName]);

		return item;
	}

	uint64_t DB::getSeqNum (const std::string& id)
	{
		const auto& parentId = getParentId (id);
		if (!parentId)
			throw DBError ("cannot fetch sequence number: unknown parent id for " + id);

		auto cursor = m_conn->query (getNamespace (*parentId), QUERY ("id" << id));
		if (!cursor->more ())
			throw DBError ("cannot fetch sequence number: unknown item " + id);

		return cursor->next () ["seq"].Long ();
	}

	void DB::incSeqNum (const std::string& id)
	{
		const auto& parentId = getParentId (id);
		if (!parentId)
			throw DBError ("cannot  sequence number: unknown parent id for " + id);

		m_conn->update (getNamespace (*parentId),
				QUERY ("id" << id),
				BSON ("$inc" << BSON ("seq" << 1)));

		if (!parentId->empty ())
			incSeqNum (*parentId);
	}

	namespace
	{
		struct ToBSONVisitor : boost::static_visitor<void>
		{
			mongo::BSONObjBuilder &m_builder;
			const std::string m_name;

			ToBSONVisitor (mongo::BSONObjBuilder& builder, const std::string& name)
			: m_builder (builder)
			, m_name (name)
			{
			}

			void operator() (const std::vector<char>& str) const
			{
				m_builder.append (m_name, str.data (), str.size ());
			}

			template<typename T>
			void operator() (const T& t) const
			{
				m_builder.append (m_name, t);
			}
		};
	}

	void DB::addItem (const Item& item)
	{
		mongo::BSONObjBuilder builder;
		builder << "id" << item.getId ();
		builder << "parentId" << item.getParentId ();
		for (const auto& pair : item)
			boost::apply_visitor (ToBSONVisitor (builder, pair.first), pair.second);

		m_conn->insert (getNamespace (item.getParentId ()), builder.obj ());

		incSeqNum (item.getParentId ());
	}

	boost::optional<std::string> DB::getParentId (const std::string& id) const
	{
		auto idCursor = m_conn->query (m_svcPrefix + "id2parent", QUERY ("id" << id));
		if (!idCursor->more ())
			return {};

		return std::string (idCursor->next ().getStringField ("parentId"));
	}

	std::string DB::getNamespace (const std::string& parentId) const
	{
		return m_dbPrefix + (parentId.empty () ? parentId : "root");
	}
}
