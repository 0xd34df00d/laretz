/**********************************************************************
 * Copyright 2013 Georg Rudoy <0xd34df00d@gmail.com>
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "itemmongo.h"
#include <mongo/client/dbclient.h>

namespace Laretz
{
	namespace
	{
		struct ToBSONVisitor : boost::static_visitor<void>
		{
			mongo::BSONObjBuilder &m_builder;
			const std::string m_name;

			ToBSONVisitor (mongo::BSONObjBuilder& builder, const std::string& name)
			: m_builder (builder)
			, m_name (name)
			{
			}

			void operator() (const std::vector<char>& str) const
			{
				m_builder.append (m_name, str.data (), str.size ());
			}

			void operator() (int64_t num) const
			{
				m_builder.append (m_name, static_cast<long long int> (num));
			}

			template<typename T>
			void operator() (const T& t) const
			{
				m_builder.append (m_name, t);
			}
		};
	}

	mongo::BSONObj toBSON (const Item& item)
	{
		mongo::BSONObjBuilder builder;
		builder << "id" << item.getId ();
		builder << "parentId" << item.getParentId ();
		for (const auto& pair : item)
			boost::apply_visitor (ToBSONVisitor (builder, pair.first), pair.second);

		return builder.obj ();
	}
}
